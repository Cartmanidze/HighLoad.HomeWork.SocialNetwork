version: '3.9'

networks:
  backend:
  k6:

services:
  # Prometheus для метрик
  prometheus:
    image: prom/prometheus:v2.47.0
    command:
      - --web.enable-remote-write-receiver
      - --enable-feature=native-histograms
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - k6
    ports:
      - "9090:9090"

  # Grafana для дашбордов
  grafana:
    image: grafana/grafana:10.1.2
    depends_on:
      - prometheus
    networks:
      - k6
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning

  # PostgreSQL мастер
  master-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: socialnetwork
      POSTGRES_HOST_AUTH_METHOD: trust
    networks:
      - backend
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data/master:/var/lib/postgresql/data
      - ./initdb-master:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cервис для инициализации слотов репликации
  init-slots:
    image: postgres:15
    depends_on:
      master-db:
        condition: service_healthy
    networks:
      - backend
    # Ждём, пока мастер будет доступен, и создаём слоты
    command: >
      bash -c "
      until pg_isready -h master-db -U postgres; do sleep 1; done &&

      if ! psql -h master-db -U postgres -tAc \"SELECT 1 FROM pg_replication_slots WHERE slot_name='slave1'\" | grep -q 1; then
        psql -h master-db -U postgres -c \"SELECT pg_create_physical_replication_slot('slave1');\"
      else
        echo 'Slot slave1 already exists, skipping creation.'
      fi &&

      if ! psql -h master-db -U postgres -tAc \"SELECT 1 FROM pg_replication_slots WHERE slot_name='slave2'\" | grep -q 1; then
        psql -h master-db -U postgres -c \"SELECT pg_create_physical_replication_slot('slave2');\"
      else
        echo 'Slot slave2 already exists, skipping creation.'
      fi
      "

  # PostgreSQL slave1
  slave1-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    depends_on:
      master-db:
        condition: service_healthy
      init-slots:
        condition: service_completed_successfully
    networks:
      - backend
    ports:
      - "5433:5432"
    volumes:
      - ./postgres-data/slave1:/var/lib/postgresql/data
    command: >
      bash -c "
      chown -R postgres:postgres /var/lib/postgresql/data &&
      chmod 700 /var/lib/postgresql/data &&
      gosu postgres bash -c '
         rm -rf /var/lib/postgresql/data/* &&
         pg_basebackup -h master-db -D /var/lib/postgresql/data -U postgres -Fp -Xs -P -R &&
         echo \"primary_slot_name = 'slave1'\" >> /var/lib/postgresql/data/postgresql.auto.conf &&
         chmod 700 /var/lib/postgresql/data &&
         exec postgres
      '
      "

  # PostgreSQL slave2
  slave2-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    depends_on:
      master-db:
        condition: service_healthy
      init-slots:
        condition: service_completed_successfully
    networks:
      - backend
    ports:
      - "5434:5432"
    volumes:
      - ./postgres-data/slave2:/var/lib/postgresql/data
    command: >
      bash -c "
      chown -R postgres:postgres /var/lib/postgresql/data &&
      chmod 700 /var/lib/postgresql/data &&
      gosu postgres bash -c '
      rm -rf /var/lib/postgresql/data/* &&
      pg_basebackup -h master-db -D /var/lib/postgresql/data -U postgres -Fp -Xs -P -R &&
      echo \"primary_slot_name = 'slave2'\" >> /var/lib/postgresql/data/postgresql.auto.conf &&
      chmod 700 /var/lib/postgresql/data &&
      exec postgres
      '
      "

  # Приложение
  highload.homework.socialnetwork:
    build:
      context: .
      dockerfile: HighLoad.HomeWork.SocialNetwork/Dockerfile
    image: highload.homework.socialnetwork
    depends_on:
      - master-db
      - slave1-db
      - slave2-db
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      ConnectionStringsDatabases__Master: "Host=master-db;Port=5432;Database=socialnetwork;Username=postgres;Password=postgres"
      ConnectionStringsDatabases__Slaves__0: "Host=slave1-db;Port=5432;Database=socialnetwork;Username=postgres;Password=postgres"
      ConnectionStringsDatabases__Slaves__1: "Host=slave2-db;Port=5432;Database=socialnetwork;Username=postgres;Password=postgres"
      Jwt__Issuer: "SocialNetwork"
      Jwt__Audience: "SocialNetworkUsers"
      Jwt__Key: "aVeryLongAndSecureSecretKeyThatIsAtLeast32Chars"
    networks:
      - backend
      - k6
    ports:
      - "8080:8080"

  # K6 для нагрузочного тестирования
  k6:
    image: grafana/k6:0.45.0
    networks:
      - k6
    volumes:
      - ./k6-scripts:/scripts
       
  # БД для PostService
  postdb:
    image: postgres:15
    container_name: postdb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postservice
      POSTGRES_HOST_AUTH_METHOD: trust
    networks:
      - backend
    ports:
      - "5435:5432"
    volumes:
      - ./postgres-data/postservice:/var/lib/postgresql/data
      - ./initdb-posts:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-h", "localhost", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Сервис постов (PostService)
  post-service:
    build:
      context: .
      dockerfile: HighLoad.HomeWork.SocialNetwork.PostService/Dockerfile
    image: highload.homework.socialnetwork.postservice
    depends_on:
      postdb:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      ConnectionStringsDatabases__PostServiceDb: "Host=postdb;Port=5432;Database=postservice;Username=postgres;Password=postgres"
      Jwt__Issuer: "SocialNetwork"
      Jwt__Audience: "SocialNetworkUsers"
      Jwt__Key: "aVeryLongAndSecureSecretKeyThatIsAtLeast32Chars"
      ServiceUrls__UserServiceUrl: "http://highload.homework.socialnetwork:8080"
    networks:
      - backend
    ports:
      - "8090:8080"
      
  # Координатор Citus
  citus-coordinator:
    image: citusdata/citus:11.2
    container_name: citus-coordinator
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: citusdb
    networks:
      - backend
    ports:
      - "5436:5432"
    volumes:
      - ./data/coordinator:/var/lib/postgresql/data
      - ./initdb-dialogs:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Воркер1
  citus-worker1:
    image: citusdata/citus:11.2
    container_name: citus-worker1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: citusdb
    networks:
      - backend
    ports:
      - "5437:5432"
    volumes:
      - ./data/worker1:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Воркер2
  citus-worker2:
    image: citusdata/citus:11.2
    container_name: citus-worker2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: citusdb
    networks:
      - backend
    ports:
      - "5438:5432"
    volumes:
      - ./data/worker2:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # DialogService
  dialog-service:
    build:
      context: .
      dockerfile: HighLoad.HomeWork.SocialNetwork.DialogService/Dockerfile
    container_name: dialog-service
    environment:
      ConnectionStrings__CitusDb: "Host=citus-coordinator;Port=5432;Database=citusdb;Username=postgres;Password=postgres"
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
    networks:
      - backend
    ports:
      - "8100:8080"
    depends_on:
      citus-coordinator:
        condition: service_healthy
      citus-worker1:
        condition: service_healthy
      citus-worker2:
        condition: service_healthy
